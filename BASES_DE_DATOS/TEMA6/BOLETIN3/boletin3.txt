-- EJERCICIO 1. Escribe un cursor que seleccione empleados junto con el nombre de su
-- departamento. Después recorre dicho cursor y muestra su contenido.



DECLARE
    CURSOR c_empleados_departamentos IS
        SELECT e.nombre, e.id, e.salario, d.nombre
        FROM empleados e inner join departamentos d on e.departamento_id = d.id;
    
    v_nombre_empleado empleados.nombre%TYPE;
	v_salario empleados.salario%TYPE;
    v_empleado_id empleados.id%TYPE;
    v_departamentos_nombre departamentos.nombre%TYPE;
BEGIN
    OPEN c_empleados_departamentos;
    LOOP
        FETCH c_empleados_departamentos INTO v_nombre_empleado,v_salario, v_empleado_id, v_departamentos_nombre;
        EXIT WHEN c_empleados_departamentos%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nombre del empleado: ' || v_nombre_empleado || ' ,salario' || v_salario || 'empleado ID'|| v_empleado_id || ', Departamento: ' || v_departamentos_nombre);
    END LOOP;
    CLOSE c_empleados_departamentos;
END;
/



-- EJERCICIO 2. Escribe un cursor que seleccione empleados de un departamento específico que
-- se le pase como parámetro y muestre su nombre y salario.

CREATE PROCEDURE MostrarEmpleadosPorDepartamento (@Departamento VARCHAR(50))
AS
BEGIN
    DECLARE @NombreEmpleado VARCHAR(100)
    DECLARE @SalarioEmpleado DECIMAL(10, 2)

    DECLARE EmpleadosCursor CURSOR FOR
    SELECT Nombre, Salario
    FROM Empleados
    WHERE Departamento = @Departamento;

    OPEN EmpleadosCursor;

    FETCH NEXT FROM EmpleadosCursor INTO @NombreEmpleado, @SalarioEmpleado;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        PRINT 'Nombre: ' + @NombreEmpleado + ', Salario: ' + CAST(@SalarioEmpleado AS VARCHAR(20));
        FETCH NEXT FROM EmpleadosCursor INTO @NombreEmpleado, @SalarioEmpleado;
    END

    CLOSE EmpleadosCursor;
    DEALLOCATE EmpleadosCursor;
END





-- EJERCICIO 3. Escribe un cursor que muestre el nombre y salario de los empleados hasta que
-- el salario sea mayor que 4000.


DECLARE
    CURSOR c_empleados_departamentos IS
        SELECT e.nombre, e.salario
        FROM empleados e;
    
    v_nombre empleados.nombre%TYPE;
	v_salario empleados.salario%TYPE;
BEGIN
    OPEN c_empleados_departamentos;
    LOOP
        FETCH c_empleados_departamentos INTO v_nombre,v_salario;
        EXIT WHEN c_empleados_departamentos%NOTFOUND or v_salario>4000;
        DBMS_OUTPUT.PUT_LINE('Nombre del empleado: ' || v_nombre || ' ,salario' || v_salario);
    END LOOP;
    CLOSE c_empleados_departamentos;
END;
/



-- EJERCICIO 4. Escribe un cursor que seleccione empleados y muestre su nombre y salario,
-- manejando la excepción de cuando no hay datos disponibles.



DECLARE
    CURSOR c_empleados_departamentos IS
        SELECT e.nombre, e.salario
        FROM empleados e;
    
    v_nombre empleados.nombre%TYPE;
	v_salario empleados.salario%TYPE;
BEGIN
    OPEN c_empleados_departamentos;
    LOOP
        FETCH c_empleados_departamentos INTO v_nombre,v_salario;
        EXIT WHEN c_empleados_departamentos%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nombre del empleado: ' || v_nombre || ' ,salario' || v_salario);
    END LOOP;
    CLOSE c_empleados_departamentos;


	exception
        when no_data_found then
        DBMS_OUTPUT.PUT_LINE("no hay datos");
END;
/




-- EJERCICIO 5. Escribe un cursor que cuente el número de empleados y muestre el total.







-- EJERCICIO 6. Escribe un cursor que actualice el salario de todos los empleados en un
-- departamento específico.

DECLARE
    CURSOR c_empleados IS
        SELECT e.id, e.salario
        FROM empleados e
    	WHERE departamento_id=2;
BEGIN
    FOR empl in c_empleados loop
    update empleados set salario=salario*1.3;
    END LOOP;
END;
/